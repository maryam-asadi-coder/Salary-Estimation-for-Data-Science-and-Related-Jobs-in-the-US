# -*- coding: utf-8 -*-
"""Project: Salary Estimation for Data Science and Related Jobs in the US.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W81zDKc03m4ZKarpF2jaq6TnNU6__Qcp
"""

from google.colab import files

uploaded = files.upload()

import pandas as pd

df = pd.read_csv('df.csv')

df

df.info()

"""#Salary column cleaning"""

def dollors_remover( a):
  a = a.replace('$', ' ')
  return a

def k_remover(a):
  a = a.replace('K' , ' ')
  return a

def glassdoor_remover(a):
  a = a.replace('(Glassdoor est.)' , ' ')
  return a

df['Salary Estimate'] = df['Salary Estimate'].apply(dollors_remover).apply(k_remover).apply(glassdoor_remover)

df = df[df['Salary Estimate'] != '-1']

df = df[~df['Salary Estimate'].str.contains('Per Hour')]

def splitter(a):
  a = a.split()
  return(a)

df['Salary Estimate'] = df['Salary Estimate'].apply(splitter)

def min_finder (a):
  a = a[0]
  return(a)

df['Min_salary'] = df['Salary Estimate'].apply(min_finder)

def max_finder(a):
  a = a[2]
  return(a)

df['Max_salary'] = df['Salary Estimate'].apply(max_finder)

df['Min_salary'] = df['Min_salary'].astype(int)
df['Max_salary'] = df['Max_salary'].astype(int)

df['Average_salary'] = (df['Min_salary'] + df['Max_salary'])/2

df.drop(columns='Salary Estimate', inplace= True)

df.info()

df.shape

df.columns

"""# Location column cleaning"""

df['Location'].value_counts()

def state(a):
  a= a.split()
  a = a[-1]
  return(a)

df['State'] = df['Location'].apply(state)

df['State']

df['State'].value_counts()

df = df[df['State'] != 'Kingdom']

df.info()

"""#Rating column cleaning"""

df = df[df['Rating']!= -1]

"""# Job Title column cleaning"""

df['Job Title'].value_counts()

set(df['Job Title'])

len(set(df['Job Title']))

def title_organizer(x):
    x = x.lower()
    if ('data scientist' in x) or ('data science' in x) :
        return 'data scientist'
    elif 'data engineer' in x:
        return 'data engineer'
    elif 'deep learning' in x:
        return 'deep learning engineer'
    elif 'machine learning' in x:
        return 'machine learning engineer'
    elif 'director' in x:
        return 'director'
    elif 'manager' in x:
        return 'manager'
    elif 'analyst' in x:
        return 'analyst'
    elif 'researcher' in x:
        return 'researcher'
    else:
        return 'other'

df['Job Title'] = df['Job Title'].apply(title_organizer)

df['Job Title']

df['Job Title'].value_counts()

df.columns

df = df.drop(columns=['Company Name',
       'Location', 'Size', 'Founded', 'Type of ownership', 'Industry',
       'Sector', 'Revenue', 'Min_salary', 'Max_salary'])

df

"""**# هر آنچه لازم بود پاکسازی شد و دیتاهای لازم رو نگه داشتم و بقیه رو پاک کردم و حالا سیو میکنم**"""

df.to_csv('my_dataframe1.csv', index=False)  #شاخص دیتافریم را در فایل CSV ذخیره نکند

# Load the DataFrame from the CSV file
df = pd.read_csv('my_dataframe1.csv')

df

df['Average_salary'].hist(bins=1000, color='blue')

df['Average_salary'].hist(bins=100, color='blue')

df['Average_salary'].hist(bins=10, color='blue')

df['Rating'].hist(bins=10, color='red')

df['Rating'].hist(bins=100, color='red')

df['Rating'].hist(bins=1000, color='red')

import seaborn as sns

sns.displot(x='Rating', data = df, bins = 10)

sns.displot(x='Rating', data = df, bins = 100)

sns.displot(x='Rating', data = df, bins = 1000)

# @title Default title text
sns.countplot(x='Job Title', data = df)

import matplotlib.pyplot as plt

sns.countplot(x='Job Title', data= df)
plt.xticks(rotation= 45)

sns.boxplot(x='Rating', data= df)

sns.scatterplot(x='Rating', y='Average_salary', data= df)

sns.scatterplot(x='Rating', y='Average_salary', data= df, hue='Job Title')

manager = df[df['Job Title']=='manager']

manager.info()

sns.scatterplot(x='Rating', y='Average_salary', data= manager)

data_scientist = df[df['Job Title']=='data scientist']

sns.scatterplot(x='Rating', y='Average_salary', data = data_scientist)

ny= df[df['State']=='NY']

sns.scatterplot(x='Rating', y='Average_salary', data= ny)

df

pd.get_dummies(df, columns=['Job Title'])

pd.get_dummies(df, columns=['Job Title','State'])

df = pd.get_dummies(df, columns=['Job Title','State'])

df.info()

df.to_csv('preprocessed_df.csv', index= False)